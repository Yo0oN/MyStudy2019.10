/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2020-01-21 03:43:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.paging1;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ServletModelPagingModel.ServletPagingBoardTO;
import ServletModelPagingModel.ServletPagingBoardDAO;
import ServletModelPagingModel.ServletPagingBoardListTO;
import java.util.ArrayList;

public final class board_005flist1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ServletModelPagingModel.ServletPagingBoardTO");
    _jspx_imports_classes.add("ServletModelPagingModel.ServletPagingBoardDAO");
    _jspx_imports_classes.add("ServletModelPagingModel.ServletPagingBoardListTO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// Action에서 목록이 담겨있는 listTO 받아오기
	ServletPagingBoardListTO listTO = (ServletPagingBoardListTO) request.getAttribute("listTO");

	// 현재 페이지
	int cpage = listTO.getCpage();
	// 한 페이지당 출력 데이터 개수
	int recordPerPage = listTO.getRecordPerPage();
	// 전체 페이지 개수
	int totalPage = listTO.getTotalPage();
	// 전체 데이터(글) 개수
	int totalRecord = listTO.getTotalRecord();
	// 페이지번호가 몇개씩 보이게 할지 설정
	int blockPerPage = listTO.getBlockPerPage();
	// 보이는 페이지 번호의 시작부분이다.
	int startBlock = listTO.getStartBlock();
	// 보이는 페이지 번호의 끝부분이다.
	int endBlock = listTO.getEndBlock();
	// 현재 페이지의 목록
	ArrayList<ServletPagingBoardTO> boardlists = listTO.getBoardLists();

	// 받아온 목록을 StringBuffer에 저장하여 아래에서 보여주게 해준다.
	StringBuffer sbHtml = new StringBuffer();

	for (ServletPagingBoardTO to : boardlists) {
		String seq = to.getSeq();
		String subject = to.getSubject();
		String writer = to.getWriter();
		String wdate = to.getWdate();
		String hit = to.getHit();
		int wgap = to.getWgap();

		sbHtml.append("<tr>");
		sbHtml.append("<td>&nbsp;</td>");
		sbHtml.append("<td>" + seq + "</td>");
		
		// 이부분이 board_view로 넘어가는 부분이다.(제목 누르면 글을 볼수있게 해주는곳)
		// seq를 가지고가서 해당 글을 가져오게 해주자.
		// 그리고 만든지 하루가 지나면 제목 옆의 그림이 사라지게 해주자.
		sbHtml.append(
				"<td class='left'><a href='./pagingController?action=view&seq=" + seq + "&cpage=" + cpage + "'>" + subject);
		if (wgap < 1) {
			sbHtml.append("</a>&nbsp;<img src='./images/icon_hot.gif' alt='HOT'>");
		}
		
		sbHtml.append("</td>");
		sbHtml.append("<td>" + writer + "</td>");
		sbHtml.append("<td>" + wdate + "</td>");
		sbHtml.append("<td>" + hit + "</td>");
		sbHtml.append("<td>&nbsp;</td>");
		sbHtml.append("</tr>");
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\"\r\n");
      out.write("\tcontent=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./css/board_list.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 상단 디자인 -->\r\n");
      out.write("\t<div class=\"con_title\">\r\n");
      out.write("\t\t<h3>게시판</h3>\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t\tHOME &gt; 게시판 &gt; <strong>게시판</strong>\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"con_txt\">\r\n");
      out.write("\t\t<div class=\"contents_sub\">\r\n");
      out.write("\t\t\t<div class=\"board_top\">\r\n");
      out.write("\t\t\t\t<div class=\"bold\">\r\n");
      out.write("\t\t\t\t\t총 <span class=\"txt_orange\">");
      out.print(totalRecord);
      out.write("</span>건\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!--게시판-->\r\n");
      out.write("\t\t\t<div class=\"board\">\r\n");
      out.write("\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"3%\">&nbsp;</th>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"5%\">번호</th>\r\n");
      out.write("\t\t\t\t\t\t<th>제목</th>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"10%\">글쓴이</th>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"17%\">등록일</th>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"5%\">조회</th>\r\n");
      out.write("\t\t\t\t\t\t<th width=\"3%\">&nbsp;</th>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<!-- 게시판 글 시작.DB에서 가져온 글목록을 이곳에 넣어주어야한다. -->\r\n");
      out.write("\t\t\t\t\t<!-- 위에 있는 DB에서 빼온 글목록을 이곳에서 출력한다. -->\r\n");
      out.write("\t\t\t\t\t");
      out.print(sbHtml);
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- 게시판 글 끝 -->\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!--//게시판-->\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!--페이지넘버-->\r\n");
      out.write("\t\t\t<div class=\"paginate_regular\">\r\n");
      out.write("\t\t\t\t<div align=\"absmiddle\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t");

						if (endBlock >= totalPage) {
							endBlock = totalPage;
						}

						// << 기호, 페이지 번호는 한번에 5개까지만 보여준다.
						// << 기호를 누르면 이전페이지 번호 5개를 보이게 하는 기능을 주자.
						if (startBlock == 1) {
							out.println("<span><a>&lt;&lt;<a></span>");
						} else {
							out.println("<span><a href='./pagingController?action=list&cpage=" + (startBlock - blockPerPage)
									+ "'>&lt;&lt;</a></span>");
						}

						// < 기호, 즉 한페이지 앞으로 가게 해주는 기호는 현재 페이지가 1페이질경우에는 아무 작동을 하지 않지만,
						// 1페이지가 아닐경우에는 한페이지 앞으로 가게 하는 기능을 준다.
						if (cpage == 1) {
							out.println("<span>&lt;</span>");
						} else {
							out.println("<span><a href='./pagingController&action=list?cpage=" + (cpage - 1) + "'>&lt;</a></span>");
						}

						out.println("&nbsp; &nbsp;");

						// 아무 이동도 하지 않고 이 게시판에 바로 들어왔을 때에는 주소창이 board_list1.jsp인 상태이다.
						// 하지만 아래의 페이지 번호를 누르게 된다면, 새로운 게시판 목록 창이 열리며 i가 함께 넘어간다.
						// 그렇게 넘어간 i페이지는 현재페이지를 나타내는 cpage에 할당되어 해당 페이지에서 보여야할 글 목록을 보여준다. 
						for (int i = startBlock; i <= endBlock; i++) {
							if (cpage == i) {
								out.println("<span><a><font color=blue>[" + i + "]</font></a></span>");
							} else {
								out.println("<span><a href='./pagingController?action=list&cpage=" + i + "'>" + i + "</a></span>");
							}
						}

						out.println("&nbsp; &nbsp;");

						// > 기호, 즉 한페이지 뒤로 가게 해주는 기호는 현재 페이지가 마지막 페이질경우에는 아무 작동을 하지 않지만,
						// 마지막 페이지가 아닐경우에는 뒷페이지로 가게 하는 기능을 준다.
						if (cpage == totalPage) {
							out.println("<span>&gt;</span>");
						} else {
							out.println("<span><a href='./pagingController?action=list&cpage=" + (cpage + 1) + "'>&gt;</a></span>");
						}

						// >> 기호, 페이지 번호는 한번에 5개씩만 보여진다. >>를 누르면 다음 5개의 숫자가 보이고, 그 페이지로 이동할 수 있게 해주자.
						// 현재 페이지가 마지막 페이질경우에는 아무 작동을 하지 않지만,
						// 마지막 페이지가 아닐경우에는 마지막 페이지로 가게 하는 기능을 준다.
						if (totalPage <= endBlock) {
							out.println("<span><a>&gt;&gt;</a></span>");
						} else {
							out.println("<span><a href='./pagingController?action=list&cpage=" + (startBlock + blockPerPage)
									+ "'>&gt;&gt;</a></span>");
						}
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!--//페이지넘버-->\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"align_right\">\r\n");
      out.write("\t\t\t\t<!-- cpage를 다음 페이지로 넘기면, 이후에 글을 쓰다가 중단하고 목록버튼을눌렀을 때,\r\n");
      out.write("\t\t\t\t\t원래 보던 목록으로 돌아올 수 있게 해준다. -->\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn_write btn_txt01\"\r\n");
      out.write("\t\t\t\t\tstyle=\"cursor: pointer;\"\r\n");
      out.write("\t\t\t\t\tonclick=\"location.href='./pagingController?action=write&cpage=");
      out.print(cpage);
      out.write("'\">쓰기</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!--//하단 디자인 -->\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
